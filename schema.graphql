# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Channel {
  author: User!
  createdAt: String!
  id: Float!
  messages: [Message!]!
  name: String!
  owner: Server!
  updatedAt: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Emote {
  author: User!
  createdAt: String!
  id: Float!
  image: String!
  name: String!
  owner: Server!
  updatedAt: String!
}

type Invite {
  author: User!
  createdAt: String!
  expire: String
  id: Float!
  owner: Server!
  updatedAt: String!
}

type Message {
  author: User!
  channel: Channel!
  content: String!
  createdAt: String!
  emotes: [Emote!]
  id: Float!
  image: String
  invite: Invite
  updatedAt: String!
}

input MessageData {
  content: String!
}

type Mutation {
  acceptRequest(userId: String!): Boolean
  createChannel(name: String!, serverId: Float!): Channel
  createInvite(expire: DateTime, serverId: Float!): Invite
  createMessage(channelId: Float!, message: MessageData!): Message
  createServer(name: String!): Server
  createUser(token: String!, userData: UserData!): User!
  declineRequest(userId: String!): Boolean!
  leaveServer(serverId: Float!): User
  removeFriend(userId: String!): Boolean
  sendRequest(userId: String!): Boolean
  useInvite(inviteId: Float!): Server
}

type Query {
  allChannels: [Channel!]!
  allInvites: [Invite!]!
  allMessages: [Message!]!
  channel(channelId: Float!): Channel
  channels(serverId: Float!): [Channel!]
  debugGetToken(email: String!, password: String!): String
  emotes: [Emote!]!
  invite(inviteId: Float!): Invite
  invites(serverId: Float!): [Invite!]
  login(token: String!): User
  me: User
  messages(channelId: Float!): [Message!]
  myEmotes: [Emote!]
  myServers: [Server!]
  servers: [Server!]!
  user(id: String!): User
  users: [User!]!
}

type Server {
  author: User!
  channels: [Channel!]!
  createdAt: String!
  emotes: [Emote!]!
  id: Float!
  invites: [Invite!]!
  members: [User!]!
  name: String!
  updatedAt: String!
}

type Subscription {
  newMessage(channelId: Float!): Message!
}

type User {
  birthday: DateTime!
  createdAt: String!
  email: String!
  friendRequests: [User!]!
  friends: [User!]!
  id: String!
  name: String!
  servers: [Server!]!
  serversOwned: [Server!]!
  updatedAt: String!
}

input UserData {
  birthday: DateTime!
  email: String!
  name: String!
}
